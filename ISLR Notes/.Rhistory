knitr::opts_chunk$set(echo = TRUE)
library(ISLR)
library(MASS)
library(tidyverse)
library(boot)
set.seed(1)
error = double(10)
for (i in 1:10){
glm.fit = glm(wage ~ poly(age,i), data = Wage)
error[i] = cv.glm(Wage, glm.fit, K = 10)$delta[1]
}
plot(error, type = 'b')
points(which.min(error), error[which.min(error)], col = 'red')
library(broom)
lm.mods<-list()
for(i in 1:10) {
lm.fit <- lm(wage ~ poly(age,i),data=Wage)
lm.mods[[i]] <- lm.fit
}
anova(lm.mods[[1]], lm.mods[[2]], lm.mods[[3]], lm.mods[[4]],lm.mods[[5]],
lm.mods[[6]],lm.mods[[7]],lm.mods[[8]],lm.mods[[9]],lm.mods[[10]])
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
coef(fit_subset, 6)
set.seed(1)
cv = double(14)
for (i in 3:16){
fit = glm(nox ~ bs(dis, df = i), data = Boston)
cv[i] = cv.glm(Boston, fit, K = 10)$delta[1]
}
plot(3:16, cv[c(-1,-2)], type = 'b')
coef(fit_subset, 6)
coefficients = coef(fit_subset, 6)
names(coefficients)
coefficients = coef(fit_subset, 6)
test
test.mat = model.matrix(test)
test.mat = model.matrix(Outstate ~., data=  train)
test.mat
coefficients
test.mat[,coefficents] %*% coefficents
test.mat[,names(coefficents)] %*% coefficents
coefficients = coef(fit_subset, 6)
test.mat = model.matrix(Outstate ~., data=  train)
test.mat[,names(coefficents)] %*% coefficents
test.mat[,names(coefficients)] %*% coefficients
pred = test.mat[,names(coefficients)] %*% coefficients
mean((pred- test$Outstate)^2)
length(pred)
lengtth(test)
length(test)
length(test$Outstate)
pred
test
test %>%
mutate(pred = pred)
test.mat = model.matrix(Outstate ~., data=  test)
pred = test.mat[,names(coefficients)] %*% coefficients
mean((test$Outstate - pred)^2)
coefficients = coef(fit_subset, 15)
test.mat = model.matrix(Outstate ~., data=  test)
pred = test.mat[,names(coefficients)] %*% coefficients
mean((test$Outstate - pred)^2)
coefficients = coef(fit_subset, 6)
test.mat = model.matrix(Outstate ~., data=  test)
pred = test.mat[,names(coefficients)] %*% coefficients
mean((test$Outstate - pred)^2)
library(leaps)
set.seed(1)
train = College %>%
sample_frac(.5)
test = College %>%
setdiff(train)
fit_subset = regsubsets(Outstate ~. ,data = train, nvmax = 17, method = 'forward')
summary(fit_subset)
plot(fit_subset, scale = 'bic')
coefficients = coef(fit_subset, 6)
coefficients
test.mat = model.matrix(Outstate ~., data=  test)
coefficients
library(leaps)
set.seed(1)
train <- sample(length(Outstate), length(Outstate) / 2)
library(leaps)
set.seed(1)
train <- sample(length(College$Outstate), length(College$Outstate) / 2)
test <- -train
College.train <- College[train, ]
College.test <- College[test, ]
fit_subset = regsubsets(Outstate ~. ,data = train, nvmax = 17, method = 'forward')
fit_subset = regsubsets(Outstate ~. ,data = College.train, nvmax = 17, method = 'forward')
summary(fit_subset)
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
plot(fit_subset, scale = 'bic')
tidy(fit_subset) %>%
gather(key = 'measure', value = value, adj.r.squared, BIC, mallows_cp) %>%
group_by(measure) %>%
mutate(num_pred = row_number()) %>%
ggplot(aes(num_pred, value))+
facet_wrap(~measure, scales = 'free')+
geom_line()+
geom_point()
coefficients = coef(fit_subset, 6)
coefficients
train$Private
College.train$Private
summary(College.train$Private)
summary(College.train$Room.Board)
summary(College.train$Terminal)
summary(College.train$perc.alumni)
summary(College.train$Expend)
gam(Outstate ~ Private + s(Room.Board, 4) + s(Terminal, 4) + s(perc.alumni, df = 4) + s(Expend, 4) + s(Grad.Rate, df = 4), data = College.train)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 4) + s(Terminal, 4) + s(perc.alumni, df = 4) + s(Expend, 4) + s(Grad.Rate, df = 4), data = College.train)
summary(gam_fit)
plot.Gam(gam_fit, se = T, col = 'steelblue')
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
?plot.Gam
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + s(perc.alumni, df = 2) + s(Expend, 5) + s(Grad.Rate, df = 2), data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + lo(Grad.Rate, span = .2), data = College.train)
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + lo(Grad.Rate, span = .2), data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
?College
preds = predict(gam_fit, College.test)
preds
err = mean((College.test$Outstate-preds)^2)
err
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5), data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
preds = predict(gam_fit, College.test)
err = mean((College.test$Outstate-preds)^2)
err
mean((College.test$Outstate - mean(College.test$Outstate))^2)
tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
preds = predict(gam_fit, College.test)
rss = mean((College.test$Outstate-preds)^2)
rss
error = mean((College.test$Outstate-preds)^2)
error
1 - (err/tss)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5) + s(PhD, df = 2), data = College.train)
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5) + s(PhD, df = 2), data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5) + s(PhD, df = 2), data = College.train)
par(mfrow = c(4,2))
plot.Gam(gam_fit, se = T, col = 'steelblue')
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5) + s(PhD, df = 2), data = College.train)
par(mfrow = c(2,4))
plot.Gam(gam_fit, se = T, col = 'steelblue')
preds = predict(gam_fit, College.test)
error = mean((College.test$Outstate-preds)^2)
error
preds = predict(gam_fit, College.test)
error = mean((College.test$Outstate-preds)^2)
error
preds = predict(gam_fit, College.test)
error = mean((College.test$Outstate-preds)^2)
error
tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
1 - (err/tss)
tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
1 - (err/tss)
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + s(Room.Board, 2) + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 5) + s(Grad.Rate, df = 5) , data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
preds = predict(gam_fit, College.test)
error = mean((College.test$Outstate-preds)^2)
error
tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
1 - (err/tss)
summary(gam_fit)
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + Room.Board + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 4) + lo(Grad.Rate, s = .7) , data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
gam_fit = gam(Outstate ~ Private + Room.Board + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 4) + lo(Grad.Rate, s = .7) , data = College.train)
gam_fit = gam(Outstate ~ Private + Room.Board + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 4) + s(Grad.Rate, df = 5) , data = College.train)
summary(College.train$Expend)
gam_fit = gam(Outstate ~ Private + Room.Board + s(Terminal, 4) + lo(perc.alumni, span = .7) + s(Expend, 4) + s(Grad.Rate, df = 5) , data = College.train)
par(mfrow = c(2,3))
plot.Gam(gam_fit, se = T, col = 'steelblue')
preds = predict(gam_fit, College.test)
error = mean((College.test$Outstate-preds)^2)
error
tss = mean((College.test$Outstate - mean(College.test$Outstate))^2)
1 - (err/tss)
summary(gam_fit)
set.seed(927)
x1 = rnorm(100,20,5)
x2 = rnorm(100,10,5)
y = 3 + 2*x1 + x2 + rnorm(100)
b1 = - 1
a = y - b1 * x1
b2 = lm(a ~ x2)$coef[2]
b2
a = y - b2 *x2
b1 = lm(a ~x1)$coef[2]
lm = lm(a ~x1)
names(lm)
lm$coef
lm$coef[2]
n = 100
b0s = double(n)
b1s = double(n)
b2s = double(n)
bos[1] = mean(y - b1*x1 - b2*x2)
n = 100
b0s = double(n)
b1s = double(n)
b2s = double(n)
b0s[1] = mean(y - b1*x1 - b2*x2)
b1s[1] = b1
b2s[1] = b2
for (i in 2:n){
a = y - b1*x1
b2 = lm(a ~x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
b0 = mean(y - b1*x1 - b2*x2)
bos[i] = bo
b1s[i] = b1
b2s[i] = b2
}
n = 100
b0s = double(n)
b1s = double(n)
b2s = double(n)
b0s[1] = mean(y - b1*x1 - b2*x2)
b1s[1] = b1
b2s[1] = b2
for (i in 2:n){
a = y - b1*x1
b2 = lm(a ~x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
b0 = mean(y - b1*x1 - b2*x2)
bos[i] = b0
b1s[i] = b1
b2s[i] = b2
}
n = 100
b0s = double(n)
b1s = double(n)
b2s = double(n)
b0s[1] = mean(y - b1*x1 - b2*x2)
b1s[1] = b1
b2s[1] = b2
for (i in 2:n){
a = y - b1*x1
b2 = lm(a ~x2)$coef[2]
a = y - b2*x2
b1 = lm(a ~ x1)$coef[2]
b0 = mean(y - b1*x1 - b2*x2)
b0s[i] = b0
b1s[i] = b1
b2s[i] = b2
}
plot(x = 1:n, y = cbind(b0s,b1s, b2s), type = 'l', lty = c(2,2,2))
matplot(x = 1:n, y = cbind(b0s,b1s, b2s), type = 'l', lty = c(2,2,2))
